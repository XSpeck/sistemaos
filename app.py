import streamlit as st
import pandas as pd
import datetime as dt
from datetime import datetime, timedelta
import json
import uuid
from typing import Dict, List, Optional
import plotly.express as px
import plotly.graph_objects as go

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Sistema de OS - Fibra √ìptica",
    page_icon="üåê",
    layout="wide"
)

# Classe para gerenciar ordens de servi√ßo de fibra √≥ptica
class FiberOpticServiceManager:
    def __init__(self):
        self.initialize_session_state()
    
    def initialize_session_state(self):
        """Inicializa o estado da sess√£o com dados espec√≠ficos de fibra √≥ptica"""
        if 'service_orders' not in st.session_state:
            st.session_state.service_orders = []
        
        if 'clients' not in st.session_state:
            st.session_state.clients = [
                {"id": "1", "name": "Jo√£o Silva", "phone": "(11) 99999-1111", "email": "joao@email.com", 
                 "address": "Rua das Flores, 123 - Vila Madalena", "cto": "CTO-001", "plan": "100MB"},
                {"id": "2", "name": "Empresa ABC Ltda", "phone": "(11) 99999-2222", "email": "contato@abc.com", 
                 "address": "Av. Paulista, 1000 - Bela Vista", "cto": "CTO-002", "plan": "500MB"},
                {"id": "3", "name": "Maria Santos", "phone": "(11) 99999-3333", "email": "maria@email.com", 
                 "address": "Rua Augusta, 456 - Consola√ß√£o", "cto": "CTO-003", "plan": "200MB"}
            ]
        
        if 'services' not in st.session_state:
            st.session_state.services = [
                {"id": "1", "name": "Instala√ß√£o Residencial", "price": 0.00, "duration": 3, "type": "Instala√ß√£o"},
                {"id": "2", "name": "Instala√ß√£o Empresarial", "price": 0.00, "duration": 4, "type": "Instala√ß√£o"},
                {"id": "3", "name": "Reparo de Cabo Rompido", "price": 150.00, "duration": 2, "type": "Reparo"},
                {"id": "4", "name": "Troca de Equipamento ONT", "price": 80.00, "duration": 1, "type": "Manuten√ß√£o"},
                {"id": "5", "name": "Mudan√ßa de Endere√ßo", "price": 100.00, "duration": 3, "type": "Mudan√ßa"},
                {"id": "6", "name": "Upgrade de Plano", "price": 0.00, "duration": 1, "type": "Upgrade"},
                {"id": "7", "name": "Reparo em CTO", "price": 200.00, "duration": 4, "type": "Reparo"},
                {"id": "8", "name": "Verifica√ß√£o de Sinal", "price": 50.00, "duration": 1, "type": "Diagn√≥stico"},
                {"id": "9", "name": "Emenda de Fibra", "price": 120.00, "duration": 2, "type": "Reparo"},
                {"id": "10", "name": "Cancelamento", "price": 0.00, "duration": 1, "type": "Cancelamento"}
            ]
        
        if 'technicians' not in st.session_state:
            st.session_state.technicians = [
                {"id": "1", "name": "Carlos Fibra", "specialty": "Instala√ß√£o", "region": "Zona Sul", "level": "S√™nior"},
                {"id": "2", "name": "Ana Conecta", "specialty": "Reparo", "region": "Centro", "level": "Pleno"},
                {"id": "3", "name": "Roberto Rede", "specialty": "Manuten√ß√£o", "region": "Zona Norte", "level": "J√∫nior"},
                {"id": "4", "name": "Mariana Link", "specialty": "Instala√ß√£o", "region": "Zona Oeste", "level": "S√™nior"},
                {"id": "5", "name": "Pedro Optical", "specialty": "Reparo", "region": "Zona Leste", "level": "Pleno"}
            ]
        
        if 'equipment' not in st.session_state:
            st.session_state.equipment = [
                {"id": "1", "name": "ONT Huawei HG8010H", "type": "ONT", "price": 150.00},
                {"id": "2", "name": "ONT Nokia G-010G-A", "type": "ONT", "price": 120.00},
                {"id": "3", "name": "Router Wi-Fi AC1200", "type": "Router", "price": 200.00},
                {"id": "4", "name": "Splitter 1x8", "type": "Splitter", "price": 25.00},
                {"id": "5", "name": "Cabo Drop 100m", "type": "Cabo", "price": 80.00},
                {"id": "6", "name": "Conector SC/APC", "type": "Conector", "price": 5.00},
                {"id": "7", "name": "Cord√£o √ìptico 3m", "type": "Cord√£o", "price": 15.00}
            ]
    
    def generate_id(self):
        """Gera um ID √∫nico"""
        return str(uuid.uuid4())[:8].upper()
    
    def create_service_order(self, order_data: Dict):
        """Cria uma nova ordem de servi√ßo"""
        order = {
            "id": f"OS{self.generate_id()}",
            "client_id": order_data["client_id"],
            "service_id": order_data["service_id"],
            "technician_id": order_data["technician_id"],
            "scheduled_date": order_data["scheduled_date"].strftime("%Y-%m-%d"),
            "scheduled_time": order_data["scheduled_time"].strftime("%H:%M"),
            "description": order_data["description"],
            "status": "Agendado",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "priority": order_data["priority"],
            "estimated_cost": order_data["estimated_cost"],
            "equipment_used": order_data.get("equipment_used", []),
            "signal_level": order_data.get("signal_level", ""),
            "observations": order_data.get("observations", ""),
            "region": order_data.get("region", ""),
            "cto_reference": order_data.get("cto_reference", "")
        }
        st.session_state.service_orders.append(order)
        return order
    
    def update_order_status(self, order_id: str, new_status: str, completion_data: Dict = None):
        """Atualiza o status de uma ordem"""
        for order in st.session_state.service_orders:
            if order["id"] == order_id:
                order["status"] = new_status
                if new_status == "Conclu√≠do" and completion_data:
                    order["completed_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    order["signal_level"] = completion_data.get("signal_level", "")
                    order["equipment_used"] = completion_data.get("equipment_used", [])
                    order["observations"] = completion_data.get("observations", "")
                    order["customer_satisfaction"] = completion_data.get("customer_satisfaction", "")
                break
    
    def get_orders_dataframe(self):
        """Retorna DataFrame com as ordens enriquecidas"""
        if not st.session_state.service_orders:
            return pd.DataFrame()
        
        orders = []
        for order in st.session_state.service_orders:
            # Busca informa√ß√µes do cliente
            client = next((c for c in st.session_state.clients if c["id"] == order["client_id"]), {})
            # Busca informa√ß√µes do servi√ßo
            service = next((s for s in st.session_state.services if s["id"] == order["service_id"]), {})
            # Busca informa√ß√µes do t√©cnico
            technician = next((t for t in st.session_state.technicians if t["id"] == order["technician_id"]), {})
            
            orders.append({
                "OS": order["id"],
                "Cliente": client.get("name", "N/A"),
                "Servi√ßo": service.get("name", "N/A"),
                "Tipo": service.get("type", "N/A"),
                "T√©cnico": technician.get("name", "N/A"),
                "Regi√£o": technician.get("region", "N/A"),
                "Data": order["scheduled_date"],
                "Hora": order["scheduled_time"],
                "Status": order["status"],
                "Prioridade": order["priority"],
                "CTO": client.get("cto", "N/A"),
                "Plano": client.get("plan", "N/A"),
                "Valor": f"R$ {order['estimated_cost']:.2f}",
                "Sinal (dBm)": order.get("signal_level", "-")
            })
        
        return pd.DataFrame(orders)

# Classe para integra√ß√£o com Google Agenda (espec√≠fica para fibra √≥ptica)
class FiberOpticCalendarIntegration:
    @staticmethod
    def create_calendar_event(order_data: Dict):
        """Simula cria√ß√£o de evento no Google Agenda para servi√ßos de fibra √≥ptica"""
        event_details = {
            "title": f"OS: {order_data['service_name']} - {order_data['client_name']}",
            "description": f"""Ordem de Servi√ßo #{order_data['id']}
Tipo: {order_data['service_type']}
Cliente: {order_data['client_name']}
Endere√ßo: {order_data.get('address', 'N/A')}
CTO: {order_data.get('cto', 'N/A')}
Plano: {order_data.get('plan', 'N/A')}
T√©cnico: {order_data['technician_name']}
Regi√£o: {order_data.get('region', 'N/A')}
Descri√ß√£o: {order_data['description']}""",
            "start_time": f"{order_data['scheduled_date']} {order_data['scheduled_time']}",
            "duration": order_data.get('duration', 2),
            "attendees": [order_data.get('client_email', ''), order_data.get('technician_email', '')]
        }
        return {"status": "success", "event_id": f"cal_{order_data['id']}", "details": event_details}

def main():
    st.title("üåê Sistema de OS - Fibra √ìptica")
    st.markdown("**Sistema de Gest√£o de Ordens de Servi√ßo para T√©cnicos de Fibra √ìptica**")
    st.markdown("---")
    
    # Inicializa o gerenciador
    manager = FiberOpticServiceManager()
    
    # Sidebar para navega√ß√£o
    st.sidebar.title("üîß Navega√ß√£o")
    st.sidebar.markdown("**Fibra √ìptica OS**")
    page = st.sidebar.selectbox(
        "Selecione uma p√°gina",
        ["üìä Dashboard", "üìù Nova OS", "üîß Gerenciar OS", "üìÖ Calend√°rio", "üìà Relat√≥rios", "‚öôÔ∏è Configura√ß√µes"]
    )
    
    # Status do sistema
    with st.sidebar.expander("‚ÑπÔ∏è Status do Sistema"):
        total_os = len(st.session_state.service_orders)
        pending_os = len([o for o in st.session_state.service_orders if o["status"] == "Agendado"])
        st.metric("Total OS", total_os)
        st.metric("OS Pendentes", pending_os)
    
    if page == "üìä Dashboard":
        show_dashboard(manager)
    elif page == "üìù Nova OS":
        show_new_order(manager)
    elif page == "üîß Gerenciar OS":
        show_manage_orders(manager)
    elif page == "üìÖ Calend√°rio":
        show_calendar(manager)
    elif page == "üìà Relat√≥rios":
        show_reports(manager)
    elif page == "‚öôÔ∏è Configura√ß√µes":
        show_settings(manager)

def show_dashboard(manager):
    """Dashboard espec√≠fico para fibra √≥ptica"""
    st.header("üìä Dashboard - Fibra √ìptica")
    
    # M√©tricas principais
    orders = st.session_state.service_orders
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        total_orders = len(orders)
        st.metric("Total OS", total_orders, delta=None)
    
    with col2:
        pending_orders = len([o for o in orders if o["status"] == "Agendado"])
        st.metric("OS Pendentes", pending_orders)
    
    with col3:
        in_progress = len([o for o in orders if o["status"] == "Em Campo"])
        st.metric("Em Campo", in_progress)
    
    with col4:
        completed_orders = len([o for o in orders if o["status"] == "Conclu√≠do"])
        st.metric("Conclu√≠das", completed_orders)
    
    with col5:
        installations = len([o for o in orders if any(s["id"] == o["service_id"] and s["type"] == "Instala√ß√£o" for s in st.session_state.services)])
        st.metric("Instala√ß√µes", installations)
    
    # M√©tricas de receita e SLA
    st.markdown("### üí∞ Indicadores Financeiros e SLA")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_revenue = sum([o["estimated_cost"] for o in orders if o["status"] == "Conclu√≠do"])
        st.metric("Receita Total", f"R$ {total_revenue:.2f}")
    
    with col2:
        avg_resolution_time = 2.5  # Simulado
        st.metric("Tempo M√©dio (h)", f"{avg_resolution_time:.1f}")
    
    with col3:
        sla_compliance = 95.2  # Simulado
        st.metric("SLA (%)", f"{sla_compliance:.1f}%", delta="2.1%")
    
    with col4:
        customer_satisfaction = 4.8  # Simulado
        st.metric("Satisfa√ß√£o", f"{customer_satisfaction:.1f}/5.0", delta="0.3")
    
    # Gr√°ficos espec√≠ficos de fibra √≥ptica
    if orders:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä OS por Tipo de Servi√ßo")
            service_types = {}
            for order in orders:
                service = next((s for s in st.session_state.services if s["id"] == order["service_id"]), {})
                service_type = service.get("type", "Outros")
                service_types[service_type] = service_types.get(service_type, 0) + 1
            
            if service_types:
                fig = px.pie(
                    values=list(service_types.values()),
                    names=list(service_types.keys()),
                    title="Distribui√ß√£o por Tipo de Servi√ßo",
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("üåç OS por Regi√£o")
            region_counts = {}
            for order in orders:
                technician = next((t for t in st.session_state.technicians if t["id"] == order["technician_id"]), {})
                region = technician.get("region", "N/A")
                region_counts[region] = region_counts.get(region, 0) + 1
            
            if region_counts:
                fig = px.bar(
                    x=list(region_counts.keys()),
                    y=list(region_counts.values()),
                    title="OS por Regi√£o de Atendimento",
                    color=list(region_counts.values()),
                    color_continuous_scale="viridis"
                )
                fig.update_layout(showlegend=False)
                st.plotly_chart(fig, use_container_width=True)
    
    # Timeline das pr√≥ximas OS
    st.subheader("üóìÔ∏è Pr√≥ximas OS Agendadas")
    df = manager.get_orders_dataframe()
    if not df.empty:
        today = datetime.now().date()
        df_future = df[df["Status"] == "Agendado"].sort_values("Data").head(8)
        if not df_future.empty:
            st.dataframe(df_future[["OS", "Cliente", "Servi√ßo", "T√©cnico", "Regi√£o", "Data", "Hora", "CTO"]], 
                        use_container_width=True)
        else:
            st.info("‚úÖ Nenhuma OS pendente encontrada")
    else:
        st.info("üìù Nenhuma OS cadastrada no sistema")

def show_new_order(manager):
    """Formul√°rio para criar nova OS de fibra √≥ptica"""
    st.header("üìù Nova Ordem de Servi√ßo - Fibra √ìptica")
    
    with st.form("new_fiber_order_form"):
        # Informa√ß√µes do cliente
        st.subheader("üë§ Informa√ß√µes do Cliente")
        col1, col2 = st.columns(2)
        
        with col1:
            clients = st.session_state.clients
            client_options = {f"{c['name']} - {c['cto']} ({c['plan']})": c['id'] for c in clients}
            selected_client = st.selectbox("üè† Cliente", options=list(client_options.keys()))
            client_id = client_options[selected_client]
            
            # Mostra informa√ß√µes do cliente selecionado
            client = next(c for c in clients if c['id'] == client_id)
            st.info(f"üìç **Endere√ßo:** {client['address']}\n\nüìû **Tel:** {client['phone']}")
        
        with col2:
            st.text_input("üåê CTO", value=client['cto'], disabled=True)
            st.text_input("üìä Plano Atual", value=client['plan'], disabled=True)
        
        # Informa√ß√µes do servi√ßo
        st.subheader("üîß Informa√ß√µes do Servi√ßo")
        col1, col2 = st.columns(2)
        
        with col1:
            services = st.session_state.services
            service_options = {f"{s['name']} ({s['type']}) - R$ {s['price']:.2f}": s['id'] for s in services}
            selected_service = st.selectbox("‚öôÔ∏è Tipo de Servi√ßo", options=list(service_options.keys()))
            service_id = service_options[selected_service]
            
            service = next(s for s in services if s['id'] == service_id)
            
            # T√©cnico respons√°vel (filtrado por tipo de servi√ßo se poss√≠vel)
            technicians = st.session_state.technicians
            if service['type'] in ['Instala√ß√£o', 'Reparo', 'Manuten√ß√£o']:
                filtered_techs = [t for t in technicians if service['type'].lower() in t['specialty'].lower()]
                if not filtered_techs:
                    filtered_techs = technicians
            else:
                filtered_techs = technicians
            
            tech_options = {f"{t['name']} - {t['region']} ({t['level']})": t['id'] for t in filtered_techs}
            selected_tech = st.selectbox("üë®‚Äçüîß T√©cnico Respons√°vel", options=list(tech_options.keys()))
            technician_id = tech_options[selected_tech]
        
        with col2:
            # Prioridade baseada no tipo de servi√ßo
            default_priority = "Alta" if service['type'] == "Reparo" else "Normal"
            priority = st.selectbox("‚ö° Prioridade", 
                                   ["Baixa", "Normal", "Alta", "Urgente"], 
                                   index=["Baixa", "Normal", "Alta", "Urgente"].index(default_priority))
            
            # Estimativa de custo
            service_price = service['price']
            estimated_cost = st.number_input("üí∞ Custo Estimado (R$)", value=service_price, min_value=0.0)
        
        # Agendamento
        st.subheader("üìÖ Agendamento")
        col1, col2 = st.columns(2)
        
        with col1:
            scheduled_date = st.date_input("üìÖ Data do Agendamento", 
                                         min_value=datetime.now().date())
        with col2:
            scheduled_time = st.time_input("üïê Hora do Agendamento", value=dt.time(8, 0))
        
        # Informa√ß√µes t√©cnicas espec√≠ficas
        st.subheader("üîç Informa√ß√µes T√©cnicas")
        col1, col2 = st.columns(2)
        
        with col1:
            description = st.text_area("üìù Descri√ß√£o do Problema/Servi√ßo", 
                                     height=80,
                                     placeholder="Ex: Cliente sem sinal, ONT offline, instala√ß√£o de novo ponto...")
            
            cto_reference = st.text_input("üåê Refer√™ncia CTO", 
                                        value=client['cto'],
                                        placeholder="Ex: CTO-001-P1")
        
        with col2:
            signal_level = st.text_input("üì∂ N√≠vel de Sinal (dBm)", 
                                       placeholder="Ex: -15.5")
            
            observations = st.text_area("üìã Observa√ß√µes", 
                                      height=80,
                                      placeholder="Observa√ß√µes adicionais...")
        
        # Equipamentos (se aplic√°vel)
        if service['type'] in ['Instala√ß√£o', 'Manuten√ß√£o', 'Reparo']:
            st.subheader("üì¶ Equipamentos Necess√°rios")
            equipment = st.session_state.equipment
            equipment_options = [f"{e['name']} - R$ {e['price']:.2f}" for e in equipment]
            selected_equipment = st.multiselect("Selecione os equipamentos", equipment_options)
        else:
            selected_equipment = []
        
        # Bot√£o de submiss√£o
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            submitted = st.form_submit_button("üöÄ Criar Ordem de Servi√ßo", 
                                            type="primary", 
                                            use_container_width=True)
        
        if submitted:
            if description.strip():
                # Calcula custo com equipamentos
                equipment_cost = 0
                equipment_list = []
                for eq_desc in selected_equipment:
                    eq_name = eq_desc.split(" - R$")[0]
                    eq = next((e for e in equipment if e['name'] == eq_name), None)
                    if eq:
                        equipment_cost += eq['price']
                        equipment_list.append(eq['name'])
                
                final_cost = estimated_cost + equipment_cost
                
                order_data = {
                    "client_id": client_id,
                    "service_id": service_id,
                    "technician_id": technician_id,
                    "scheduled_date": scheduled_date,
                    "scheduled_time": scheduled_time,
                    "description": description,
                    "priority": priority,
                    "estimated_cost": final_cost,
                    "equipment_used": equipment_list,
                    "signal_level": signal_level,
                    "observations": observations,
                    "cto_reference": cto_reference
                }
                
                # Cria a ordem
                new_order = manager.create_service_order(order_data)
                
                # Prepara dados para o Google Agenda
                technician = next(t for t in technicians if t['id'] == technician_id)
                calendar_data = {
                    "id": new_order["id"],
                    "client_name": client["name"],
                    "client_email": client["email"],
                    "address": client["address"],
                    "cto": client["cto"],
                    "plan": client["plan"],
                    "service_name": service["name"],
                    "service_type": service["type"],
                    "technician_name": technician["name"],
                    "region": technician["region"],
                    "scheduled_date": scheduled_date.strftime("%Y-%m-%d"),
                    "scheduled_time": scheduled_time.strftime("%H:%M"),
                    "description": description,
                    "duration": service.get("duration", 2)
                }
                
                calendar_result = FiberOpticCalendarIntegration.create_calendar_event(calendar_data)
                
                st.success(f"‚úÖ **Ordem de Servi√ßo {new_order['id']} criada com sucesso!**")
                
                # Mostra resumo da OS criada
                with st.expander("üìã Resumo da OS Criada", expanded=True):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown(f"""
                        **üìã OS:** {new_order['id']}
                        **üë§ Cliente:** {client['name']}
                        **üè† Endere√ßo:** {client['address']}
                        **üåê CTO:** {client['cto']}
                        **üìä Plano:** {client['plan']}
                        """)
                    with col2:
                        st.markdown(f"""
                        **üîß Servi√ßo:** {service['name']}
                        **üë®‚Äçüîß T√©cnico:** {technician['name']}
                        **üåç Regi√£o:** {technician['region']}
                        **üìÖ Agendamento:** {scheduled_date.strftime('%d/%m/%Y')} √†s {scheduled_time.strftime('%H:%M')}
                        **üí∞ Custo Total:** R$ {final_cost:.2f}
                        """)
                    
                    if equipment_list:
                        st.markdown(f"**üì¶ Equipamentos:** {', '.join(equipment_list)}")
                
                if calendar_result["status"] == "success":
                    st.success("üìÖ Evento agendado no Google Agenda!")
                
            else:
                st.error("‚ö†Ô∏è Por favor, preencha a descri√ß√£o do servi√ßo.")

def show_manage_orders(manager):
    """P√°gina para gerenciar ordens de fibra √≥ptica"""
    st.header("üîß Gerenciar OS - Fibra √ìptica")
    
    # Filtros espec√≠ficos para fibra √≥ptica
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        status_filter = st.selectbox("Status", ["Todos", "Agendado", "Em Campo", "Aguardando Pe√ßas", "Conclu√≠do", "Cancelado"])
    with col2:
        priority_filter = st.selectbox("Prioridade", ["Todas", "Baixa", "Normal", "Alta", "Urgente"])
    with col3:
        service_type_filter = st.selectbox("Tipo", ["Todos", "Instala√ß√£o", "Reparo", "Manuten√ß√£o", "Upgrade", "Cancelamento"])
    with col4:
        region_filter = st.selectbox("Regi√£o", ["Todas", "Centro", "Zona Sul", "Zona Norte", "Zona Oeste", "Zona Leste"])
    
    # DataFrame das ordens
    df = manager.get_orders_dataframe()
    
    if not df.empty:
        # Aplicar filtros
        if status_filter != "Todos":
            df = df[df["Status"] == status_filter]
        if priority_filter != "Todas":
            df = df[df["Prioridade"] == priority_filter]
        if service_type_filter != "Todos":
            df = df[df["Tipo"] == service_type_filter]
        if region_filter != "Todas":
            df = df[df["Regi√£o"] == region_filter]
        
        st.dataframe(df, use_container_width=True)
        
        # Atualiza√ß√£o de status
        st.markdown("---")
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìù Atualizar Status da OS")
            if len(df) > 0:
                selected_order = st.selectbox("Selecionar OS", df["OS"].tolist())
                new_status = st.selectbox("Novo Status", ["Agendado", "Em Campo", "Aguardando Pe√ßas", "Conclu√≠do", "Cancelado"])
                
                # Se concluindo, pedir informa√ß√µes adicionais
                completion_data = {}
                if new_status == "Conclu√≠do":
                    with st.expander("üìä Dados de Conclus√£o"):
                        completion_data["signal_level"] = st.text_input("N√≠vel de Sinal Final (dBm)")
                        completion_data["equipment_used"] = st.text_area("Equipamentos Utilizados").split(',') if st.text_area("Equipamentos Utilizados") else []
                        completion_data["observations"] = st.text_area("Observa√ß√µes Finais")
                        completion_data["customer_satisfaction"] = st.select_slider("Satisfa√ß√£o do Cliente", 
                                                                                   options=[1, 2, 3, 4, 5], 
                                                                                   value=5)
                
                if st.button("üîÑ Atualizar Status", type="primary"):
                    manager.update_order_status(selected_order, new_status, completion_data if new_status == "Conclu√≠do" else None)
                    st.success(f"‚úÖ Status da OS {selected_order} atualizado para: **{new_status}**")
                    st.rerun()
        
        with col2:
            st.subheader("üîç Detalhes da OS")
            if len(df) > 0:
                detail_order = st.selectbox("Ver Detalhes da OS", df["OS"].tolist(), key="detail_select")
                
                # Encontra a ordem selecionada
                selected_order_data = next((o for o in st.session_state.service_orders if o["id"] == detail_order), None)
                if selected_order_data:
                    client = next((c for c in st.session_state.clients if c["id"] == selected_order_data["client_id"]), {})
                    service = next((s for s in st.session_state.services if s["id"] == selected_order_data["service_id"]), {})
                    technician = next((t for t in st.session_state.technicians if t["id"] == selected_order_data["technician_id"]), {})
                    
                    with st.expander(f"üìã Detalhes - {detail_order}", expanded=True):
                        st.markdown(f"""
                        **üè† Cliente:** {client.get('name', 'N/A')}
                        **üìç Endere√ßo:** {client.get('address', 'N/A')}
                        **üåê CTO:** {client.get('cto', 'N/A')}
                        **üìä Plano:** {client.get('plan', 'N/A')}
                        **üîß Servi√ßo:** {service.get('name', 'N/A')}
                        **üë®‚Äçüîß T√©cnico:** {technician.get('name', 'N/A')}
                        **üåç Regi√£o:** {technician.get('region', 'N/A')}
                        **üìÖ Data:** {selected_order_data.get('scheduled_date', 'N/A')}
                        **üïê Hora:** {selected_order_data.get('scheduled_time', 'N/A')}
                        **‚ö° Prioridade:** {selected_order_data.get('priority', 'N/A')}
                        **üìä Status:** {selected_order_data.get('status', 'N/A')}
                        **üí∞ Valor:** R$ {selected_order_data.get('estimated_cost', 0):.2f}
                        """)
                        
                        if selected_order_data.get('signal_level'):
                            st.markdown(f"**üì∂ Sinal:** {selected_order_data['signal_level']} dBm")
                        
                        if selected_order_data.get('equipment_used'):
                            st.markdown(f"**üì¶ Equipamentos:** {', '.join(selected_order_data['equipment_used'])}")
                        
                        st.markdown(f"**üìù Descri√ß√£o:** {selected_order_data.get('description', 'N/A')}")
                        
                        if selected_order_data.get('observations'):
                            st.markdown(f"**üìã Observa√ß√µes:** {selected_order_data['observations']}")
    else:
        st.info("üìù Nenhuma OS encontrada com os filtros aplicados")

def show_calendar(manager):
    """Visualiza√ß√£o em calend√°rio para fibra √≥ptica"""
    st.header("üìÖ Calend√°rio de Agendamentos - Fibra √ìptica")
    
    # Sele√ß√£o do per√≠odo
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_month = st.selectbox("üìÖ M√™s", range(1, 13), index=datetime.now().month-1)
    with col2:
        selected_year = st.selectbox("üìÖ Ano", range(2024, 2027), index=1)
    with col3:
        view_type = st.selectbox("üîç Visualiza√ß√£o", ["Por Regi√£o", "Por Tipo de Servi√ßo", "Por T√©cnico"])
    
    # Mostra agendamentos do m√™s
    orders = st.session_state.service_orders
    month_orders = []
    
    for order in orders:
        order_date = datetime.strptime(order["scheduled_date"], "%Y-%m-%d")
        if order_date.month == selected_month and order_date.year == selected_year:
            client = next((c for c in st.session_state.clients if c["id"] == order["client_id"]), {})
            service = next((s for s in st.session_state.services if s["id"] == order["service_id"]), {})
            technician = next((t for t in st.session_state.technicians if t["id"] == order["technician_id"]), {})
            
            month_orders.append({
                "OS": order["id"],
                "Data": order["scheduled_date"],
                "Hora": order["scheduled_time"],
                "Cliente": client.get("name", "N/A"),
                "CTO": client.get("cto", "N/A"),
                "Servi√ßo": service.get("name", "N/A"),
                "Tipo": service.get("type", "N/A"),
                "T√©cnico": technician.get("name", "N/A"),
                "Regi√£o": technician.get("region", "N/A"),
                "Status": order["status"],
                "Prioridade": order["priority"]
            })
    
    if month_orders:
        df = pd.DataFrame(month_orders)
        df = df.sort_values(["Data", "Hora"])
        
        # M√©tricas do m√™s
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìã Total OS", len(month_orders))
        with col2:
            installations = len([o for o in month_orders if o["Tipo"] == "Instala√ß√£o"])
            st.metric("üè† Instala√ß√µes", installations)
        with col3:
            repairs = len([o for o in month_orders if o["Tipo"] == "Reparo"])
            st.metric("üîß Reparos", repairs)
        with col4:
            urgent = len([o for o in month_orders if o["Prioridade"] == "Urgente"])
            st.metric("üö® Urgentes", urgent)
        
        st.dataframe(df, use_container_width=True)
        
        # Gr√°fico baseado na visualiza√ß√£o selecionada
        col1, col2 = st.columns(2)
        
        with col1:
            if view_type == "Por Regi√£o":
                region_counts = df.groupby("Regi√£o").size().reset_index(name="Quantidade")
                fig = px.bar(region_counts, x="Regi√£o", y="Quantidade", 
                           title="Agendamentos por Regi√£o",
                           color="Quantidade", color_continuous_scale="viridis")
                st.plotly_chart(fig, use_container_width=True)
            
            elif view_type == "Por Tipo de Servi√ßo":
                type_counts = df.groupby("Tipo").size().reset_index(name="Quantidade")
                fig = px.pie(type_counts, values="Quantidade", names="Tipo", 
                           title="Distribui√ß√£o por Tipo de Servi√ßo")
                st.plotly_chart(fig, use_container_width=True)
            
            else:  # Por T√©cnico
                tech_counts = df.groupby("T√©cnico").size().reset_index(name="Quantidade")
                fig = px.bar(tech_counts, x="T√©cnico", y="Quantidade", 
                           title="Agendamentos por T√©cnico",
                           color="Quantidade", color_continuous_scale="plasma")
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Gr√°fico de agendamentos por dia
            daily_counts = df.groupby("Data").size().reset_index(name="Agendamentos")
            daily_counts["Data"] = pd.to_datetime(daily_counts["Data"])
            fig = px.line(daily_counts, x="Data", y="Agendamentos", 
                         title="Agendamentos por Dia", markers=True)
            fig.update_layout(xaxis_title="Data", yaxis_title="N√∫mero de Agendamentos")
            st.plotly_chart(fig, use_container_width=True)
        
        # Agenda detalhada por dia
        st.subheader("üóìÔ∏è Agenda Detalhada")
        selected_date = st.date_input("Selecionar Data", value=datetime.now().date())
        date_str = selected_date.strftime("%Y-%m-%d")
        day_orders = df[df["Data"] == date_str]
        
        if not day_orders.empty:
            day_orders = day_orders.sort_values("Hora")
            st.dataframe(day_orders[["OS", "Hora", "Cliente", "Servi√ßo", "T√©cnico", "Regi√£o", "Status"]], 
                        use_container_width=True)
        else:
            st.info(f"üìÖ Nenhum agendamento para {selected_date.strftime('%d/%m/%Y')}")
            
    else:
        st.info("üìÖ Nenhum agendamento encontrado para este m√™s")

def show_reports(manager):
    """Relat√≥rios espec√≠ficos para fibra √≥ptica"""
    st.header("üìà Relat√≥rios - Fibra √ìptica")
    
    orders = st.session_state.service_orders
    
    if orders:
        # Seletor de per√≠odo para relat√≥rios
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("üìÖ Data In√≠cio", value=datetime.now().date() - timedelta(days=30))
        with col2:
            end_date = st.date_input("üìÖ Data Fim", value=datetime.now().date())
        
        # Filtra ordens por per√≠odo
        period_orders = []
        for order in orders:
            order_date = datetime.strptime(order["scheduled_date"], "%Y-%m-%d").date()
            if start_date <= order_date <= end_date:
                period_orders.append(order)
        
        if period_orders:
            # M√©tricas principais do per√≠odo
            st.subheader(f"üìä Indicadores do Per√≠odo ({start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')})")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_period = len(period_orders)
                st.metric("Total OS", total_period)
            
            with col2:
                completed_period = len([o for o in period_orders if o["status"] == "Conclu√≠do"])
                completion_rate = (completed_period / total_period * 100) if total_period > 0 else 0
                st.metric("Taxa Conclus√£o", f"{completion_rate:.1f}%")
            
            with col3:
                total_revenue_period = sum([o["estimated_cost"] for o in period_orders if o["status"] == "Conclu√≠do"])
                st.metric("Receita", f"R$ {total_revenue_period:.2f}")
            
            with col4:
                installations_period = len([o for o in period_orders 
                                          if any(s["id"] == o["service_id"] and s["type"] == "Instala√ß√£o" 
                                               for s in st.session_state.services)])
                st.metric("Instala√ß√µes", installations_period)
            
            # Relat√≥rio por tipo de servi√ßo
            st.subheader("üìã Relat√≥rio por Tipo de Servi√ßo")
            service_analysis = {}
            for order in period_orders:
                service = next((s for s in st.session_state.services if s["id"] == order["service_id"]), {})
                service_type = service.get("type", "Outros")
                
                if service_type not in service_analysis:
                    service_analysis[service_type] = {
                        "total": 0, "concluidas": 0, "receita": 0, "pendentes": 0
                    }
                
                service_analysis[service_type]["total"] += 1
                if order["status"] == "Conclu√≠do":
                    service_analysis[service_type]["concluidas"] += 1
                    service_analysis[service_type]["receita"] += order["estimated_cost"]
                elif order["status"] in ["Agendado", "Em Campo"]:
                    service_analysis[service_type]["pendentes"] += 1
            
            service_report = []
            for service_type, data in service_analysis.items():
                completion_rate = (data["concluidas"] / data["total"] * 100) if data["total"] > 0 else 0
                service_report.append({
                    "Tipo de Servi√ßo": service_type,
                    "Total": data["total"],
                    "Conclu√≠das": data["concluidas"],
                    "Pendentes": data["pendentes"],
                    "Taxa Conclus√£o (%)": f"{completion_rate:.1f}%",
                    "Receita (R$)": f"{data['receita']:.2f}"
                })
            
            st.dataframe(pd.DataFrame(service_report), use_container_width=True)
            
            # Relat√≥rio de produtividade por t√©cnico
            st.subheader("üë®‚Äçüîß Produtividade por T√©cnico")
            tech_analysis = {}
            for order in period_orders:
                tech_id = order["technician_id"]
                technician = next((t for t in st.session_state.technicians if t["id"] == tech_id), {})
                tech_name = technician.get("name", "N/A")
                region = technician.get("region", "N/A")
                
                if tech_id not in tech_analysis:
                    tech_analysis[tech_id] = {
                        "name": tech_name, "region": region, "total": 0, 
                        "concluidas": 0, "receita": 0, "instalacoes": 0, "reparos": 0
                    }
                
                tech_analysis[tech_id]["total"] += 1
                if order["status"] == "Conclu√≠do":
                    tech_analysis[tech_id]["concluidas"] += 1
                    tech_analysis[tech_id]["receita"] += order["estimated_cost"]
                
                # Conta tipos espec√≠ficos
                service = next((s for s in st.session_state.services if s["id"] == order["service_id"]), {})
                if service.get("type") == "Instala√ß√£o":
                    tech_analysis[tech_id]["instalacoes"] += 1
                elif service.get("type") == "Reparo":
                    tech_analysis[tech_id]["reparos"] += 1
            
            tech_report = []
            for tech_id, data in tech_analysis.items():
                completion_rate = (data["concluidas"] / data["total"] * 100) if data["total"] > 0 else 0
                avg_revenue = data["receita"] / data["concluidas"] if data["concluidas"] > 0 else 0
                
                tech_report.append({
                    "T√©cnico": data["name"],
                    "Regi√£o": data["region"],
                    "Total OS": data["total"],
                    "Conclu√≠das": data["concluidas"],
                    "Instala√ß√µes": data["instalacoes"],
                    "Reparos": data["reparos"],
                    "Taxa Conclus√£o (%)": f"{completion_rate:.1f}%",
                    "Receita Total (R$)": f"{data['receita']:.2f}",
                    "Receita M√©dia (R$)": f"{avg_revenue:.2f}"
                })
            
            st.dataframe(pd.DataFrame(tech_report), use_container_width=True)
            
            # Gr√°ficos de an√°lise
            col1, col2 = st.columns(2)
            
            with col1:
                # Gr√°fico de instala√ß√µes vs reparos por regi√£o
                region_analysis = {}
                for order in period_orders:
                    tech = next((t for t in st.session_state.technicians if t["id"] == order["technician_id"]), {})
                    service = next((s for s in st.session_state.services if s["id"] == order["service_id"]), {})
                    region = tech.get("region", "N/A")
                    service_type = service.get("type", "Outros")
                    
                    if region not in region_analysis:
                        region_analysis[region] = {"Instala√ß√£o": 0, "Reparo": 0, "Outros": 0}
                    
                    if service_type in region_analysis[region]:
                        region_analysis[region][service_type] += 1
                    else:
                        region_analysis[region]["Outros"] += 1
                
                region_df = pd.DataFrame(region_analysis).T.fillna(0)
                if not region_df.empty:
                    fig = px.bar(region_df, title="Instala√ß√µes vs Reparos por Regi√£o", 
                               color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c'])
                    st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Gr√°fico de evolu√ß√£o temporal
                daily_analysis = {}
                for order in period_orders:
                    date = order["scheduled_date"]
                    if date not in daily_analysis:
                        daily_analysis[date] = 0
                    daily_analysis[date] += 1
                
                if daily_analysis:
                    dates = sorted(daily_analysis.keys())
                    counts = [daily_analysis[date] for date in dates]
                    
                    fig = go.Figure()
                    fig.add_trace(go.Scatter(x=dates, y=counts, mode='lines+markers', 
                                           name='OS por Dia', line=dict(color='#1f77b4')))
                    fig.update_layout(title="Evolu√ß√£o das OS no Per√≠odo",
                                    xaxis_title="Data", yaxis_title="N√∫mero de OS")
                    st.plotly_chart(fig, use_container_width=True)
            
            # Relat√≥rio de SLA e qualidade
            st.subheader("üìä Indicadores de SLA e Qualidade")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Simular dados de SLA
                on_time_completion = 85.5
                st.metric("SLA Cumprimento", f"{on_time_completion:.1f}%", delta="3.2%")
            
            with col2:
                # Simular satisfa√ß√£o do cliente
                avg_satisfaction = 4.7
                st.metric("Satisfa√ß√£o M√©dia", f"{avg_satisfaction:.1f}/5.0", delta="0.2")
            
            with col3:
                # Tempo m√©dio de resolu√ß√£o
                avg_resolution_time = 2.3
                st.metric("Tempo M√©dio (h)", f"{avg_resolution_time:.1f}h", delta="-0.5h")
            
        else:
            st.info("üìÖ Nenhuma OS encontrada no per√≠odo selecionado")
    else:
        st.info("üìä Nenhum dado dispon√≠vel para relat√≥rios")

def show_settings(manager):
    """Configura√ß√µes espec√≠ficas para fibra √≥ptica"""
    st.header("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üë§ Clientes", "üîß Servi√ßos", "üë®‚Äçüîß T√©cnicos", "üì¶ Equipamentos"])
    
    with tab1:
        st.subheader("Gerenciar Clientes")
        
        # Adicionar novo cliente
        with st.expander("‚ûï Adicionar Novo Cliente"):
            with st.form("new_client_form"):
                col1, col2 = st.columns(2)
                with col1:
                    name = st.text_input("üë§ Nome/Raz√£o Social")
                    phone = st.text_input("üìû Telefone")
                    email = st.text_input("üìß Email")
                with col2:
                    address = st.text_area("üìç Endere√ßo Completo", height=100)
                    cto = st.text_input("üåê CTO", placeholder="Ex: CTO-001")
                    plan = st.selectbox("üìä Plano", ["50MB", "100MB", "200MB", "300MB", "500MB", "1GB"])
                
                if st.form_submit_button("‚ûï Adicionar Cliente"):
                    if name and phone and address:
                        new_client = {
                            "id": manager.generate_id(),
                            "name": name,
                            "phone": phone,
                            "email": email,
                            "address": address,
                            "cto": cto,
                            "plan": plan
                        }
                        st.session_state.clients.append(new_client)
                        st.success("‚úÖ Cliente adicionado com sucesso!")
                        st.rerun()
        
        # Lista de clientes
        if st.session_state.clients:
            clients_df = pd.DataFrame(st.session_state.clients)
            clients_df = clients_df[["name", "phone", "email", "cto", "plan"]]
            clients_df.columns = ["Nome", "Telefone", "Email", "CTO", "Plano"]
            st.dataframe(clients_df, use_container_width=True)
    
    with tab2:
        st.subheader("Gerenciar Tipos de Servi√ßo")
        
        # Adicionar novo servi√ßo
        with st.expander("‚ûï Adicionar Novo Servi√ßo"):
            with st.form("new_service_form"):
                col1, col2 = st.columns(2)
                with col1:
                    name = st.text_input("üîß Nome do Servi√ßo")
                    service_type = st.selectbox("üìã Categoria", 
                                              ["Instala√ß√£o", "Reparo", "Manuten√ß√£o", "Upgrade", "Diagn√≥stico", "Cancelamento"])
                with col2:
                    price = st.number_input("üí∞ Pre√ßo (R$)", min_value=0.0)
                    duration = st.number_input("‚è±Ô∏è Dura√ß√£o (horas)", min_value=1, value=2)
                
                if st.form_submit_button("‚ûï Adicionar Servi√ßo"):
                    if name:
                        new_service = {
                            "id": manager.generate_id(),
                            "name": name,
                            "type": service_type,
                            "price": price,
                            "duration": duration
                        }
                        st.session_state.services.append(new_service)
                        st.success("‚úÖ Servi√ßo adicionado com sucesso!")
                        st.rerun()
        
        # Lista de servi√ßos
        if st.session_state.services:
            services_df = pd.DataFrame(st.session_state.services)
            services_df = services_df[["name", "type", "price", "duration"]]
            services_df.columns = ["Nome", "Categoria", "Pre√ßo (R$)", "Dura√ß√£o (h)"]
            st.dataframe(services_df, use_container_width=True)
    
    with tab3:
        st.subheader("Gerenciar T√©cnicos")
        
        # Adicionar novo t√©cnico
        with st.expander("‚ûï Adicionar Novo T√©cnico"):
            with st.form("new_technician_form"):
                col1, col2 = st.columns(2)
                with col1:
                    name = st.text_input("üë®‚Äçüîß Nome do T√©cnico")
                    specialty = st.selectbox("üéØ Especialidade", 
                                           ["Instala√ß√£o", "Reparo", "Manuten√ß√£o", "Geral"])
                with col2:
                    region = st.selectbox("üåç Regi√£o", 
                                        ["Centro", "Zona Sul", "Zona Norte", "Zona Oeste", "Zona Leste"])
                    level = st.selectbox("‚≠ê N√≠vel", ["J√∫nior", "Pleno", "S√™nior"])
                
                if st.form_submit_button("‚ûï Adicionar T√©cnico"):
                    if name:
                        new_tech = {
                            "id": manager.generate_id(),
                            "name": name,
                            "specialty": specialty,
                            "region": region,
                            "level": level
                        }
                        st.session_state.technicians.append(new_tech)
                        st.success("‚úÖ T√©cnico adicionado com sucesso!")
                        st.rerun()
        
        # Lista de t√©cnicos
        if st.session_state.technicians:
            techs_df = pd.DataFrame(st.session_state.technicians)
            techs_df = techs_df[["name", "specialty", "region", "level"]]
            techs_df.columns = ["Nome", "Especialidade", "Regi√£o", "N√≠vel"]
            st.dataframe(techs_df, use_container_width=True)
    
    with tab4:
        st.subheader("Gerenciar Equipamentos")
        
        # Adicionar novo equipamento
        with st.expander("‚ûï Adicionar Novo Equipamento"):
            with st.form("new_equipment_form"):
                col1, col2 = st.columns(2)
                with col1:
                    name = st.text_input("üì¶ Nome do Equipamento")
                    equipment_type = st.selectbox("üîß Tipo", 
                                                ["ONT", "Router", "Switch", "Splitter", "Cabo", "Conector", "Cord√£o", "Outros"])
                with col2:
                    price = st.number_input("üí∞ Pre√ßo (R$)", min_value=0.0)
                
                if st.form_submit_button("‚ûï Adicionar Equipamento"):
                    if name:
                        new_equipment = {
                            "id": manager.generate_id(),
                            "name": name,
                            "type": equipment_type,
                            "price": price
                        }
                        st.session_state.equipment.append(new_equipment)
                        st.success("‚úÖ Equipamento adicionado com sucesso!")
                        st.rerun()
        
        # Lista de equipamentos
        if st.session_state.equipment:
            equipment_df = pd.DataFrame(st.session_state.equipment)
            equipment_df = equipment_df[["name", "type", "price"]]
            equipment_df.columns = ["Nome", "Tipo", "Pre√ßo (R$)"]
            st.dataframe(equipment_df, use_container_width=True)
    
    # Configura√ß√µes do sistema
    st.markdown("---")
    st.subheader("üîß Configura√ß√µes do Sistema")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üóëÔ∏è Limpar Todas as OS", type="secondary"):
            if st.button("‚ö†Ô∏è Confirmar Limpeza", type="secondary"):
                st.session_state.service_orders = []
                st.success("‚úÖ Todas as OS foram removidas!")
                st.rerun()
    
    with col2:
        if st.button("üì§ Exportar Dados", type="secondary"):
            # Simular exporta√ß√£o
            st.info("üìã Funcionalidade de exporta√ß√£o ser√° implementada")

if __name__ == "__main__":
    main()
